{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","index","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","startSearch","event","target","value","preventDefault","searchYelp","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","process","then","response","json","jsonResponse","image_url","address1","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9f1ca44f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Business.css\";\r\n\r\nexport default class Business extends React.Component {\r\n    render() {\r\n        let business = this.props.business;\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={business.imageSrc} alt=\"\" />\r\n                </div>\r\n                <h2>{business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{business.address}</p>\r\n                        <p>{business.city}</p>\r\n                        <p>\r\n                            {business.state} {business.zipCode}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{business.category}</h3>\r\n                        <h3 className=\"rating\">{business.rating}</h3>\r\n                        <p>{business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./BusinessList.css\";\r\nimport Business from \"../Business/Business\";\r\n\r\nexport default class BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses.map((business, index) => {\r\n                    return (\r\n                        <Business\r\n                            key={business.id}\r\n                            business={business}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nexport default class SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: \"\", // Search term located in the search input\r\n            location: \"\", // Location to search near from the location input\r\n            sortBy: \"best_match\", // The selected sorting option to use\r\n        };\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\",\r\n        };\r\n    }\r\n\r\n    // Returns the css styling for the actively chosen sort element\r\n    getSortByClass(sortByOption) {\r\n        return this.state.sortBy === sortByOption ? \"active\" : \"\";\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({ sortBy: sortByOption });\r\n        this.startSearch();\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        const term = event.target.value;\r\n        this.setState({ term: term });\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        const location = event.target.value;\r\n        this.setState({ location: location });\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.startSearch();\r\n        event.preventDefault();\r\n    }\r\n\r\n    // Starts a new yelp search and refreshes the results\r\n    startSearch() {\r\n        this.props.searchYelp(\r\n            this.state.term,\r\n            this.state.location,\r\n            this.state.sortBy\r\n        );\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n            // Retrieves the value of that key (i.e. \"best_match\")\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            // Gives a list element with the sort option and the value as its reference key\r\n            return (\r\n                <li\r\n                    className={this.getSortByClass(sortByOptionValue)}\r\n                    onClick={this.handleSortByChange.bind(\r\n                        this,\r\n                        sortByOptionValue\r\n                    )}\r\n                    key={sortByOptionValue}\r\n                >\r\n                    {sortByOption}\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>{this.renderSortByOptions()}</ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input\r\n                        onChange={this.handleTermChange}\r\n                        placeholder=\"Search Businesses\"\r\n                    />\r\n                    <input\r\n                        onChange={this.handleLocationChange}\r\n                        placeholder=\"Where?\"\r\n                    />\r\n                </div>\r\n                <div onClick={this.handleSearch} className=\"SearchBar-submit\">\r\n                    {/* Using a link as a button isn't a good accessibility practice, but we'll fix this later*/}\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// Use your super secret API KEY\r\nconst apiKey = process.env.REACT_APP_YELP_API_KEY;\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(\r\n            `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${apiKey}`,\r\n                },\r\n            }\r\n        )\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((jsonResponse) => {\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map((business) => {\r\n                        return {\r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.address1,\r\n                            city: business.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.location.city,\r\n                            category: business.categories[0].title,\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count,\r\n                        };\r\n                    });\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport default Yelp;","import React from \"react\";\nimport \"./App.css\";\n\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\n\nimport Yelp from \"../../util/Yelp\";\n\n/*\nBelow is a list of some potential features to add to Ravenous:\n\n-Make addresses clickable and have them open the address in Google Maps in a new tab\n-Make images clickable and have them open the business’ website in a new tab\n-Implement your own type of sort (for example, by entering a distance or radius from a central location)\n-Allow you to search by pressing “Enter” (or “Return”) on your keyboard, as opposed to manually clicking\n-Add autocompletion of addresses to the “Location” input\n*/\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            businesses: [],\n        };\n        this.searchYelp = this.searchYelp.bind(this);\n    }\n\n    // Searches the Yelp API for data defined by the given parameters\n    searchYelp(term, location, sortBy) {\n        Yelp.search(term, location, sortBy).then((businesses) => {\n            this.setState({ businesses: businesses });\n        });\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>ravenous</h1>\n                <SearchBar searchYelp={this.searchYelp} />\n                <BusinessList businesses={this.state.businesses} />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}